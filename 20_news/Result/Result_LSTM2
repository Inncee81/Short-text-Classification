LSTM with 5 classes

###################################################################################################

acc': [0.28699999999999998, 0.37025000000000002, 0.42199999999999999, 0.46250000000000002, 0.47649999999999998, 0.4985, 0.50575000000000003, 0.54474999999999996, 0.56325000000000003, 0.59025000000000005, 0.62675000000000003, 0.6865, 0.74475000000000002, 0.79900000000000004, 0.83250000000000002, 0.85850000000000004, 0.87575000000000003, 0.90900000000000003, 0.93074999999999997, 0.93400000000000005, 0.95674999999999999, 0.96325000000000005, 0.96975, 0.96350000000000002, 0.98024999999999995], 
'loss': [1.5489877596497537, 1.4040804609656334, 1.2973795861005784, 1.2481846913695336, 1.2293843388557435, 1.1972814798355103, 1.1569745779037475, 1.1070734664797783, 1.0693626321852208, 1.0109138093888759, 0.9397862568497658, 0.8314011298120022, 0.68304776921868327, 0.52711649835109708, 0.43645304776728155, 0.36877269223332404, 0.36576741486787795, 0.31020006351172924, 0.24286785870790481, 0.24191464483737946, 0.17028797809034585, 0.14662479562684894, 0.11846256339922548, 0.13542243987321853, 0.088743687886744735], '
val_acc': [0.36899999999999999, 0.39500000000000002, 0.374, 0.45900000000000002, 0.433, 0.44900000000000001, 0.46999999999999997, 0.47099999999999997, 0.48199999999999998, 0.52200000000000002, 0.54700000000000004, 0.60499999999999998, 0.68200000000000005, 0.69299999999999995, 0.72399999999999998, 0.76600000000000001, 0.748, 0.81699999999999995, 0.81499999999999995, 0.83099999999999996, 0.84099999999999997, 0.85199999999999998, 0.86499999999999999, 0.873, 0.88300000000000001], '
val_loss': [1.3771834671497345, 1.3220207929611205, 1.4037484049797058, 1.229640781879425, 1.2938786149024963, 1.1903382599353791, 1.1746410012245179, 1.1589252233505249, 1.1299260377883911, 1.1047360599040985, 1.0415408045053482, 0.89994562268257139, 0.69223117828369141, 0.6160310745239258, 0.57823821604251857, 0.55693522691726682, 0.58720415830612183, 0.47716601639986039, 0.46682110875844957, 0.46628577113151548, 0.42931904196739196, 0.40546882450580596, 0.37522323727607726, 0.35723031014204026, 0.31099078208208086]}

###################################################################################################
BASE_DIR = '.'
GLOVE_DIR = BASE_DIR + '/glove.twitter.27B/'

TEXT_DATA_DIR = BASE_DIR + '/20_newsgroups/'

MAX_SEQUENCE_LENGTH = 1000
MAX_NB_WORDS = 20000
EMBEDDING_DIM = 100
VALIDATION_SPLIT = 0.2
CONVOLUTION_FEATURE = 256
DENSE_FEATURE = 1024
DROP_OUT = 0.3

# first, build index mapping words in the embeddings set
# to their embedding vector

print('Indexing word vectors.')
print('Embedding Dimesions: %s' % (str(EMBEDDING_DIM)))

embeddings_index = {}
fname = os.path.join(GLOVE_DIR, 'glove.twitter.27B.' + str(EMBEDDING_DIM) + 'd.txt')
f = open(fname)
for line in f:
    values = line.split()
    word = values[0]
    coefs = np.asarray(values[1:], dtype='float32')
    embeddings_index[word] = coefs
f.close()

print('Found %s word vectors.' % len(embeddings_index))

# second, prepare text samples and their labels
print('Processing text dataset')

texts = []  # list of text samples
labels_index = {}  # dictionary mapping label name to numeric id
labels = []  # list of label ids
for name in sorted(os.listdir(TEXT_DATA_DIR)):
    path = os.path.join(TEXT_DATA_DIR, name)
    if os.path.isdir(path):
        label_id = len(labels_index)
        labels_index[name] = label_id
        for fname in sorted(os.listdir(path)):
            if fname.isdigit():
                fpath = os.path.join(path, fname)
                if sys.version_info < (3,):
                    f = open(fpath)
                else:
                    f = open(fpath, encoding='latin-1')
                texts.append(f.read())
                f.close()
                labels.append(label_id)

print('Found %s texts.' % len(texts))

# finally, vectorize the text samples into a 2D integer tensor
tokenizer = Tokenizer(nb_words=MAX_NB_WORDS)
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)

word_index = tokenizer.word_index
print('Found %s unique tokens.' % len(word_index))

data = pad_sequences(sequences, maxlen=MAX_SEQUENCE_LENGTH)

labels = to_categorical(np.asarray(labels))
print('Shape of data tensor:', data.shape)
print('Shape of label tensor:', labels.shape)

# split the data into a training set and a validation set
indices = np.arange(data.shape[0])
np.random.shuffle(indices)
data = data[indices]
labels = labels[indices]
nb_validation_samples = int(VALIDATION_SPLIT * data.shape[0])

x_train = data[:-nb_validation_samples]
y_train = labels[:-nb_validation_samples]
x_val = data[-nb_validation_samples:]
y_val = labels[-nb_validation_samples:]

print('Preparing embedding matrix.')

# prepare embedding matrix
nb_words = min(MAX_NB_WORDS, len(word_index))
embedding_matrix = np.zeros((nb_words + 1, EMBEDDING_DIM))
for word, i in word_index.items():
    if i > MAX_NB_WORDS:
        continue
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        # words not found in embedding index will be all-zeros.
        embedding_matrix[i] = embedding_vector

# load pre-trained word embeddings into an Embedding layer
# note that we set trainable = False so as to keep the embeddings fixed
# embedding_layer = Embedding(nb_words + 1,
#                             EMBEDDING_DIM,
#                             weights=[embedding_matrix],
#                             input_length=MAX_SEQUENCE_LENGTH,
#                             trainable=False)

print('Training model.')
model = Sequential()

model.add(Embedding(                          # Layer 0, Start
    input_dim=nb_words + 1,                   # Size to dictionary, has to be input + 1
    output_dim=EMBEDDING_DIM,                 # Dimensions to generate
    weights=[embedding_matrix],               # Initialize word weights
    input_length=MAX_SEQUENCE_LENGTH))        # Define length to input sequences in the first layer

model.add(LSTM(128, dropout_W=0.2, dropout_U=0.2))  # try using a GRU instead, for fun
model.add(Dense(5))
model.add(Activation('sigmoid'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

print("Done compiling.")
Train on 4000 samples, validate on 1000 samples
Epoch 1/25
4000/4000 [==============================] - 22s - loss: 1.5490 - acc: 0.2870 - val_loss: 1.3772 - val_acc: 0.3690
Epoch 2/25
4000/4000 [==============================] - 22s - loss: 1.4041 - acc: 0.3703 - val_loss: 1.3220 - val_acc: 0.3950
Epoch 3/25
4000/4000 [==============================] - 23s - loss: 1.2974 - acc: 0.4220 - val_loss: 1.4037 - val_acc: 0.3740
Epoch 4/25
4000/4000 [==============================] - 23s - loss: 1.2482 - acc: 0.4625 - val_loss: 1.2296 - val_acc: 0.4590
Epoch 5/25
4000/4000 [==============================] - 23s - loss: 1.2294 - acc: 0.4765 - val_loss: 1.2939 - val_acc: 0.4330
Epoch 6/25
4000/4000 [==============================] - 23s - loss: 1.1973 - acc: 0.4985 - val_loss: 1.1903 - val_acc: 0.4490
Epoch 7/25
4000/4000 [==============================] - 22s - loss: 1.1570 - acc: 0.5057 - val_loss: 1.1746 - val_acc: 0.4700
Epoch 8/25
4000/4000 [==============================] - 22s - loss: 1.1071 - acc: 0.5447 - val_loss: 1.1589 - val_acc: 0.4710
Epoch 9/25
4000/4000 [==============================] - 22s - loss: 1.0694 - acc: 0.5632 - val_loss: 1.1299 - val_acc: 0.4820
Epoch 10/25
4000/4000 [==============================] - 22s - loss: 1.0109 - acc: 0.5903 - val_loss: 1.1047 - val_acc: 0.5220
Epoch 11/25
4000/4000 [==============================] - 22s - loss: 0.9398 - acc: 0.6268 - val_loss: 1.0415 - val_acc: 0.5470
Epoch 12/25
4000/4000 [==============================] - 22s - loss: 0.8314 - acc: 0.6865 - val_loss: 0.8999 - val_acc: 0.6050
Epoch 13/25
4000/4000 [==============================] - 22s - loss: 0.6830 - acc: 0.7448 - val_loss: 0.6922 - val_acc: 0.6820
Epoch 14/25
4000/4000 [==============================] - 22s - loss: 0.5271 - acc: 0.7990 - val_loss: 0.6160 - val_acc: 0.6930
Epoch 15/25
4000/4000 [==============================] - 22s - loss: 0.4365 - acc: 0.8325 - val_loss: 0.5782 - val_acc: 0.7240
Epoch 16/25
4000/4000 [==============================] - 22s - loss: 0.3688 - acc: 0.8585 - val_loss: 0.5569 - val_acc: 0.7660
Epoch 17/25
4000/4000 [==============================] - 22s - loss: 0.3658 - acc: 0.8757 - val_loss: 0.5872 - val_acc: 0.7480
Epoch 18/25
4000/4000 [==============================] - 22s - loss: 0.3102 - acc: 0.9090 - val_loss: 0.4772 - val_acc: 0.8170
Epoch 19/25
4000/4000 [==============================] - 22s - loss: 0.2429 - acc: 0.9307 - val_loss: 0.4668 - val_acc: 0.8150
Epoch 20/25
4000/4000 [==============================] - 23s - loss: 0.2419 - acc: 0.9340 - val_loss: 0.4663 - val_acc: 0.8310
Epoch 21/25
4000/4000 [==============================] - 22s - loss: 0.1703 - acc: 0.9567 - val_loss: 0.4293 - val_acc: 0.8410
Epoch 22/25
4000/4000 [==============================] - 23s - loss: 0.1466 - acc: 0.9632 - val_loss: 0.4055 - val_acc: 0.8520
Epoch 23/25
4000/4000 [==============================] - 22s - loss: 0.1185 - acc: 0.9698 - val_loss: 0.3752 - val_acc: 0.8650
Epoch 24/25
4000/4000 [==============================] - 22s - loss: 0.1354 - acc: 0.9635 - val_loss: 0.3572 - val_acc: 0.8730
Epoch 25/25
4000/4000 [==============================] - 22s - loss: 0.0887 - acc: 0.9803 - val_loss: 0.3110 - val_acc: 0.8830
Training Time :  588.760605097

###################################################################################################