buffer overrun attacks on the call stack some buffer overrun attacks put the code they want to be executed on the call stack how can the ability to distinguish between programs and data help to construct a defense against this particular type of buffer overrun attacks the idea is as follows your processor has memories a data memory and a program memory the os can read write to both types of memory but only starts programs running in the program memory programs can only read write to data memory leaving program memory pristine an attempt to execute an instruction in data memory is considered an exemption causing the os to take over and terminate the program that tried to execute data buffer overruns can only modify data memory and thus can't cause new code to be executed what can still happen is that a different code path could be taken for instance if i knew that address x was the address of the bitch slap the user subroutine then i could change the stack with a buffer overrun to cause this subroutine to be run Buffer overflow Forth programming language Subroutine Stack-smashing protection CPU cache Pointer Motorola 68000 CDC 6600 CPU design Variable Virtual memory C programming language Threaded code Apollo Guidance Computer Thread (computer science) RISC PDP-8 MDAC Von Neumann architecture Perl Emacs NX bit Microprogram X86 assembly language Computer Burroughs B5000 BASIC programming language Visual Basic IA-32 MOS Technology 6502 Self-modifying code MUMPS PostScript X86 Embedded system Page table Assembly language Computer virus Processor register Compiler Mach kernel System/34 IBM 1401 Object-oriented programming PDP-11 Register renaming Software bug Architecture of Windows 2000 Multics DragonFly BSD Master Control Program Return-to-libc attack Perl 6 Emulator Windows 2000 IBM 1130 Control flow Stack (computing) Sinclair ZX81 MBASIC RCA 1802 Addressing mode Data General Nova Booting Resource fork C plus plus Spring operating system Datatype HP BASIC for OpenVMS Windows XP Crash (computing) Library (computer science) Linked list Programming language Pipeline (Unix) Cache Java programming language Lisp programming language MMIX AMD 29000 General protection fault Cray-1 LR parser Out-of-order execution P-Code machine Malloc CDC Cyber Method (computer science) Trusted computing English Electric KDF9 IBM 1620 Computer multitasking 