string manipulation you have to write a function whose prototype is given bellow this function will accept two char named subject and pattern for example subject abracadbra and pattern bca now it should check occurrences of all chars of string pattern in subject if any match occurs then it will remove that char from subject so finally as in our example at end subject rdr void fun char subject char pattern write your code here it should be an algorithm generic to all languages dont use any in built libraries this kind of question can be overcomplicated but here is a simple working solution include iostream h void fun char subject char pattern char o p bool remove for o subject o o remove false for p pattern p p if o p remove true if remove subject o subject ' ' void main char sub abracadabra char pat bca fun sub pat printf s sub explanation first pointers are passed into the function subject pattern first loop loops through each character in the subject by incrementing a pointer o until the terminating character is reached o stops when it sees the null terminator second loop loops through pattern checking if the contents at address o character in subject is same as contents at address p character in pattern if we find a match record it with a boolean once we finish the pattern loop we can start to change the subject string the function has been passed a pointer to subject so we know at the start subject subject if there is no match we can keep the character at o so set the contents of subject to o and increment its pointer note there are pointers going through subject one to read and one to write once we finish we make sure subject has a terminating character as all strings must have C syntax ALGOL 68 Knuth-Morris-Pratt algorithm Linked list C plus plus Hello world program Buffer overflow Printf Associative array Cyclone programming language Objective-C String (computer science) Brainfuck Const correctness Python programming language Stack-smashing protection Virtual method table Icon programming language CPU cache Lisp programming language PHP Scheme programming language C Sharp Control flow Perl Callback (computer science) MUMPS Binary numeral system UTF-8 JavaScript Forth programming language Halting problem Garbage collection (computer science) Thread (computer science) AS/400 Command Language 0 (number) Motorola 68000 Polymorphism (computer science) Common Lisp Compiler optimization X86 assembly language Addressing mode Bogosort Exception handling Normal distribution Boolean datatype New I/O Comparison of generics to templates Lazy evaluation BASIC programming language Reference (computer science) Rabin-Karp string search algorithm Ocaml Java programming language Apollo Guidance Computer Pattern matching Reference counting Turing machine Tagged union Boolean logic Subroutine Dynamic-Link Library PDP-8 Class (computer science) Domain Name System LR parser Array Visitor pattern Tcl Boolean algebra Prolog Laws of Form Lambda calculus Quantum computer NP (complexity) Fortran Iterator Regular expression Enterprise content management Extreme Programming Berkeley sockets Indent style Fibonacci number Endianness Software testing Database management system Compiler Object-oriented programming Function object Merge algorithm 