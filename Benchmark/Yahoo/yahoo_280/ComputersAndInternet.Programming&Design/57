future it skills in your opinion what will be the most in demand it skills in the next three or four years i'm thinking specifically of software engineering and programming skills right now java and sql seems to dominiate the marketplace what will happen in or years it seems that lately lots of writers have been bashing java some people seem to think that java has stagnated and that the hyper enthusiasts have left well the rest of us are just quietly coding on a platform that is more exciting than ever other technologies like ruby php net or ajax might get more hype and acclaim lately but hype aside java still produces the majority of innovation in the software profession you can get a sense of java's health by simply looking at how many projects are out there using java pop on over to sourceforge and look at the number of projects by language http sourceforge net softwaremap trove list php form cat certainly sourceforge is not the final measure but it's a reasonable reality check anyway you'll find java projects the most of any language that's more than php ruby and net c vb net combined because of its prominence java gets a lot of attention and with it much criticism some of it valid what many may not realize is that some big breakthroughs have arrived and that the java development landscape is solving important problems let's take a view of where java is going to go in the next year or two as these ideas gain traction the first big arena of innovation is the addition of scripting support some people rightly claim ruby or python is better the java for some tasks groovy and beanshell solve these same problems and will become a standard in the jsr sense part of the java stack each offers something better than standalone scripting both integrate into a truly mixed environment with compiled bytecode and interpreted scripts interoperating smoothly beanshell's syntax offers as little surprise as possible for the java developer and groovy gives a ruby like syntactic efficiency but can also be compiled to pure bytecode and reused seamlessly a big improvement over jruby or jython second the days of heavyweight frameworks are gone j ee style ejbs are out now the lightweight frameworks like hibernate spring and hivemind are the future of java the heavy struts of the past is being replaced with two new directions struts shale based on jsf and struts ti is a wholesale merge with webwork these projects share a common idea that the framework should stay out of the way of your object model ejb takes the same view a third major innovation where java leads is aspect oriented programming aop aop will unclutter your code by moving cross cutting concerns like logging and security to transparent method interceptors aspectj is the rolls royce for aop but spring has lightweight aop themes as does the new jboss fourth the php crowd had a legitimate gripe that banging out a simple web page took too much work if you were using jsp and struts but our templating solutions like velocity freemarker and now groovy don't make you choose between ultralight text generation and powerful mid tier solutions groovlets should make for some rapid servlet solutions for those people who really like php keep it java makes it the reference implementation for the new web scripting language bindings so you can do your web views in php and use java for model and controller finally java's traditional strength in the tools arena just keeps increasing eclipse is the best ide on the planet and it appears that eclipse has reached critical mass like ant and junit did in that people simply expect solutions that extend it eclipse's team coding capabilities for cvs and subversion via the subclipse plugin are first rate the refactoring and debugging support are top notch integration of standard tools like ant compilers junit and javadocs are about as good as you can imagine so perhaps the hyper enthusiasts have left and the buzzword mongers will proclaim that java is dead if java is dead it's only because it was laid to rest so that a better lighter more agile form of java could replace it so long live java Scheme programming language OpenOffice.org Mach kernel Mozilla Firefox Linux Game programmer Compiler Visual Basic .NET Computer Product Lifecycle Management Mac OS X Windows 2000 AspectJ Arianne Common Lisp Class (computer science) Comment Cocoa (API) Ada programming language Quicksort Web application Pretty Good Privacy Unicode Integrated development environment JavaScript Gmail Database GNOME Exception handling KDevelop Model-view-controller AppleScript ColdFusion Web design C plus plus Cross site scripting Grid computing Software development process WebSphere Spring operating system Sun Microsystems Windows XP Parrot virtual machine Obfuscated code HyperCard Comparison of generics to templates OpenGL NetBeans Hello world program C programming language Xcode MDAC Library (computer science) XSL Transformations Domain-specific programming language COBOL OpenDoc Pointer Enterprise content management Forth programming language Component Object Model Web service Requirements analysis OpenBSD 